"""
Usage Analyzer - Ph√¢n t√≠ch s·ª≠ d·ª•ng license
"""

import boto3
from datetime import datetime, timedelta
from typing import Dict, List
from decimal import Decimal
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from config.config import *
from license_tracker import LicenseTracker

class UsageAnalyzer:
    def __init__(self):
        """Kh·ªüi t·∫°o Usage Analyzer"""
        self.tracker = LicenseTracker()
    
    def analyze_usage_patterns(self) -> Dict:
        """Ph√¢n t√≠ch pattern s·ª≠ d·ª•ng license"""
        licenses = self.tracker.get_all_licenses()
        analysis = {
            'total_licenses': len(licenses),
            'underutilized': [],
            'overutilized': [],
            'expiring_soon': [],
            'expired': [],
            'cost_analysis': {}
        }
        
        total_cost = 0
        total_waste = 0
        
        for license in licenses:
            usage_rate = float(license['used_licenses']) / float(license['total_licenses'])
            cost_per_license = float(license['cost_per_license'])
            total_licenses = float(license['total_licenses'])
            used_licenses = float(license['used_licenses'])
            monthly_cost = cost_per_license * total_licenses
            total_cost += monthly_cost
            
            # Ki·ªÉm tra underutilized (d∆∞·ªõi 30%)
            if usage_rate < COST_SETTINGS['min_usage_for_recommendation']:
                waste = (total_licenses - used_licenses) * cost_per_license
                total_waste += waste
                analysis['underutilized'].append({
                    'software': license['software_name'],
                    'usage_rate': f"{usage_rate:.1%}",
                    'unused_licenses': int(total_licenses - used_licenses),
                    'potential_savings': waste
                })
            
            # Ki·ªÉm tra overutilized (tr√™n 95%)
            if usage_rate > COMPLIANCE_THRESHOLDS['usage_critical']:
                analysis['overutilized'].append({
                    'software': license['software_name'],
                    'usage_rate': f"{usage_rate:.1%}",
                    'risk_level': 'HIGH'
                })
            
            # Ki·ªÉm tra expiring soon v√† expired
            if license.get('expiry_date'):
                try:
                    expiry = datetime.strptime(license['expiry_date'], '%Y-%m-%d')
                    days_until_expiry = (expiry - datetime.now()).days
                    if days_until_expiry < 0:
                        analysis['expired'].append({
                            'software': license['software_name'],
                            'expiry_date': license['expiry_date'],
                            'days_expired': abs(days_until_expiry)
                        })
                    elif days_until_expiry <= COMPLIANCE_THRESHOLDS['expiry_warning_days']:
                        analysis['expiring_soon'].append({
                            'software': license['software_name'],
                            'expiry_date': license['expiry_date'],
                            'days_remaining': days_until_expiry
                        })
                except:
                    pass
        
        analysis['cost_analysis'] = {
            'total_monthly_cost': total_cost,
            'potential_monthly_savings': total_waste,
            'efficiency_rate': f"{((total_cost - total_waste) / total_cost * 100):.1f}%" if total_cost > 0 else "0%"
        }
        
        return analysis
    
    def generate_recommendations(self, analysis: Dict) -> List[str]:
        """T·∫°o ƒë·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a"""
        recommendations = []
        
        # ƒê·ªÅ xu·∫•t cho underutilized licenses
        for item in analysis['underutilized']:
            recommendations.append(
                f"üîÑ Gi·∫£m {item['unused_licenses']} license cho {item['software']} "
                f"ƒë·ªÉ ti·∫øt ki·ªám ${item['potential_savings']:.2f}/th√°ng"
            )
        
        # ƒê·ªÅ xu·∫•t cho overutilized licenses
        for item in analysis['overutilized']:
            recommendations.append(
                f"‚ö†Ô∏è C·∫ßn mua th√™m license cho {item['software']} "
                f"(ƒëang s·ª≠ d·ª•ng {item['usage_rate']})"
            )
        
        # ƒê·ªÅ xu·∫•t cho expiring licenses (ch·ªâ nh·ªØng license c√≤n h·∫°n)
        for item in analysis['expiring_soon']:
            if item['days_remaining'] > 0:
                recommendations.append(
                    f"üìÖ Gia h·∫°n {item['software']} trong {item['days_remaining']} ng√†y"
                )
        
        # ƒê·ªÅ xu·∫•t cho expired licenses
        for item in analysis['expired']:
            recommendations.append(
                f"üõí N√™n mua license {item['software']} n·∫øu v·∫´n c√≤n s·ª≠ d·ª•ng"
            )
        
        return recommendations
    
    def print_analysis_report(self):
        """In b√°o c√°o ph√¢n t√≠ch"""
        print("=" * 60)
        print("üìä B√ÅO C√ÅO PH√ÇN T√çCH LICENSE")
        print("=" * 60)
        
        analysis = self.analyze_usage_patterns()
        
        # T·ªïng quan
        print(f"\nüîç T·ªîNG QUAN:")
        print(f"- T·ªïng s·ªë license: {analysis['total_licenses']}")
        print(f"- Chi ph√≠ h√†ng th√°ng: ${analysis['cost_analysis']['total_monthly_cost']:.2f}")
        print(f"- Ti·ªÅm nƒÉng ti·∫øt ki·ªám: ${analysis['cost_analysis']['potential_monthly_savings']:.2f}")
        print(f"- Hi·ªáu su·∫•t s·ª≠ d·ª•ng: {analysis['cost_analysis']['efficiency_rate']}")
        
        # Underutilized
        if analysis['underutilized']:
            print(f"\n‚ö° LICENSE S·ª¨ D·ª§NG TH·∫§P ({len(analysis['underutilized'])}):")
            for item in analysis['underutilized']:
                print(f"- {item['software']}: {item['usage_rate']} (ti·∫øt ki·ªám ${item['potential_savings']:.2f})")
        
        # Overutilized
        if analysis['overutilized']:
            print(f"\nüö® LICENSE S·ª¨ D·ª§NG CAO ({len(analysis['overutilized'])}):")
            for item in analysis['overutilized']:
                print(f"- {item['software']}: {item['usage_rate']}")
        
        # Expiring
        if analysis['expiring_soon']:
            print(f"\nüìÖ LICENSE S·∫ÆP H·∫æT H·∫†N ({len(analysis['expiring_soon'])}):")
            for item in analysis['expiring_soon']:
                print(f"- {item['software']}: {item['days_remaining']} ng√†y")
        
        # Expired
        if analysis['expired']:
            print(f"\n‚ùå LICENSE ƒê√É H·∫æT H·∫†N ({len(analysis['expired'])}):")
            for item in analysis['expired']:
                print(f"- {item['software']}: h·∫øt h·∫°n {item['days_expired']} ng√†y")
        
        # Recommendations
        recommendations = self.generate_recommendations(analysis)
        if recommendations:
            print(f"\nüí° ƒê·ªÄ XU·∫§T T·ªêI ∆ØU H√ìA:")
            for rec in recommendations:
                print(f"  {rec}")
        
        print("\n" + "=" * 60)

def main():
    """Test function"""
    analyzer = UsageAnalyzer()
    analyzer.print_analysis_report()

if __name__ == "__main__":
    main()