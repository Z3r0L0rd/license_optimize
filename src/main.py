"""
License Optimization System - Main Application
H·ªá th·ªëng t·ªëi ∆∞u h√≥a license ch√≠nh
"""

import sys
import os
from datetime import datetime

# Th√™m path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from license_tracker import LicenseTracker
from usage_analyzer import UsageAnalyzer
from compliance_checker import ComplianceChecker

class LicenseOptimizationSystem:
    def __init__(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng"""
        self.tracker = LicenseTracker()
        self.analyzer = UsageAnalyzer()
        self.compliance = ComplianceChecker()
        
    def setup_system(self):
        """Thi·∫øt l·∫≠p h·ªá th·ªëng l·∫ßn ƒë·∫ßu"""
        print("üöÄ THI·∫æT L·∫¨P H·ªÜ TH·ªêNG LICENSE OPTIMIZATION!!")
        print("=" * 50)
        
        # T·∫°o b·∫£ng DynamoDB
        print("1. T·∫°o c∆° s·ªü d·ªØ li·ªáu...")
        self.tracker.create_table_if_not_exists()
        
        # Th√™m d·ªØ li·ªáu m·∫´u
        print("2. Th√™m d·ªØ li·ªáu m·∫´u...")
        sample_licenses = [
            {
                'license_id': 'exOFFICE365-001',
                'software_name': 'exMicrosoft Office 365',
                'license_type': 'SUBSCRIPTION',
                'total_licenses': 50,
                'used_licenses': 35,
                'expiry_date': '2024-12-31',
                'cost_per_license': 12.50
            },
            {
                'license_id': 'exADOBE-CC-001',
                'software_name': 'exAdobe Creative Cloud',
                'license_type': 'SUBSCRIPTION',
                'total_licenses': 20,
                'used_licenses': 8,
                'expiry_date': '2024-11-15',
                'cost_per_license': 52.99
            },
            {
                'license_id': 'exWINDOWS-001',
                'software_name': 'exWindows 11 Pro',
                'license_type': 'PERPETUAL',
                'total_licenses': 1,
                'used_licenses': 1,
                'expiry_date': '',
                'cost_per_license': 199.99
            }
        ]
        
        for license_data in sample_licenses:
            self.tracker.add_license(license_data)
        
        print("‚úÖ Thi·∫øt l·∫≠p ho√†n t·∫•t!")
    
    def run_daily_check(self):
        """Ch·∫°y ki·ªÉm tra h√†ng ng√†y"""
        print("üìÖ KI·ªÇM TRA H√ÄNG NG√ÄY")
        print("=" * 50)
        
        # Ki·ªÉm tra compliance
        print("1. Ki·ªÉm tra tu√¢n th·ªß...")
        self.compliance.print_compliance_report()
        
        # Ph√¢n t√≠ch usage
        print("\n2. Ph√¢n t√≠ch s·ª≠ d·ª•ng...")
        self.analyzer.print_analysis_report()
        
        # L∆∞u b√°o c√°o
        print("\n3. L∆∞u b√°o c√°o...")
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        reports_dir = os.path.join(os.path.dirname(__file__), '..', 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        report_path = os.path.join(reports_dir, f"compliance_{timestamp}.txt")
        self.compliance.save_compliance_report(report_path)
        
    def interactive_menu(self):
        """Menu t∆∞∆°ng t√°c"""
        while True:
            print("\n" + "=" * 50)
            print("üéØ LICENSE OPTIMIZATION SYSTEM")
            print("=" * 50)
            print("1. Xem t·∫•t c·∫£ license")
            print("2. Th√™m license m·ªõi")
            print("3. C·∫≠p nh·∫≠t usage")
            print("4. Ki·ªÉm tra tu√¢n th·ªß")
            print("5. Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t")
            print("6. Ch·∫°y ki·ªÉm tra h√†ng ng√†y")
            print("7. Thi·∫øt l·∫≠p h·ªá th·ªëng")
            print("0. Tho√°t")
            print("-" * 50)
            
            choice = input("Ch·ªçn ch·ª©c nƒÉng (0-7): ").strip()
            
            if choice == '0':
                print("üëã T·∫°m bi·ªát!")
                break
            elif choice == '1':
                self._show_all_licenses()
            elif choice == '2':
                self._add_new_license()
            elif choice == '3':
                self._update_usage()
            elif choice == '4':
                self.compliance.print_compliance_report()
            elif choice == '5':
                self.analyzer.print_analysis_report()
            elif choice == '6':
                self.run_daily_check()
            elif choice == '7':
                self.setup_system()
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    def _show_all_licenses(self):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ license"""
        licenses = self.tracker.get_all_licenses()
        if not licenses:
            print("üì≠ Ch∆∞a c√≥ license n√†o!")
            return
        
        print(f"\nüìä DANH S√ÅCH LICENSE ({len(licenses)}):")
        print("-" * 80)
        for license in licenses:
            usage_rate = (license['used_licenses'] / license['total_licenses']) * 100
            status = "üü¢" if usage_rate < 80 else "üü°" if usage_rate < 95 else "üî¥"
            print(f"{status} {license['software_name']}")
            print(f"   ID: {license['license_id']}")
            print(f"   S·ª≠ d·ª•ng: {license['used_licenses']}/{license['total_licenses']} ({usage_rate:.1f}%)")
            print(f"   Chi ph√≠: ${float(license['cost_per_license'])}/license")
            if license.get('expiry_date'):
                print(f"   H·∫øt h·∫°n: {license['expiry_date']}")
            print()
    
    def _add_new_license(self):
        """Th√™m license m·ªõi"""
        print("\n‚ûï TH√äM LICENSE M·ªöI:")
        try:
            license_data = {
                'license_id': input("License ID: ").strip(),
                'software_name': input("T√™n ph·∫ßn m·ªÅm: ").strip(),
                'license_type': input("Lo·∫°i license (SUBSCRIPTION/PERPETUAL/CONCURRENT/NAMED_USER): ").strip().upper(),
                'total_licenses': int(input("T·ªïng s·ªë license: ")),
                'used_licenses': int(input("S·ªë license ƒëang d√πng: ")),
                'expiry_date': input("Ng√†y h·∫øt h·∫°n (YYYY-MM-DD, ƒë·ªÉ tr·ªëng n·∫øu vƒ©nh vi·ªÖn): ").strip(),
                'cost_per_license': float(input("Chi ph√≠ m·ªói license ($): "))
            }
            
            if self.tracker.add_license(license_data):
                print("‚úÖ Th√™m license th√†nh c√¥ng!")
            else:
                print("‚ùå Th√™m license th·∫•t b·∫°i!")
                
        except ValueError:
            print("‚ùå D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá!")
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
    
    def _update_usage(self):
        """C·∫≠p nh·∫≠t usage"""
        print("\nüîÑ C·∫¨P NH·∫¨T USAGE:")
        try:
            license_id = input("License ID: ").strip()
            used_licenses = int(input("S·ªë license ƒëang s·ª≠ d·ª•ng: "))
            
            if self.tracker.update_usage(license_id, used_licenses):
                print("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!")
            else:
                print("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!")
                
        except ValueError:
            print("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!")
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")

def main():
    """H√†m ch√≠nh"""
    system = LicenseOptimizationSystem()
    
    print("üéØ Ch√†o m·ª´ng ƒë·∫øn v·ªõi License Optimization System!")
    print("H·ªá th·ªëng t·ªëi ∆∞u h√≥a license v·ªõi chi ph√≠ th·∫•p s·ª≠ d·ª•ng AWS")
    
    # Ki·ªÉm tra xem c√≥ mu·ªën thi·∫øt l·∫≠p h·ªá th·ªëng kh√¥ng
    setup = input("\nB·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p h·ªá th·ªëng l·∫ßn ƒë·∫ßu? (y/n): ").lower()
    if setup == 'y':
        system.setup_system()
    
    # Ch·∫°y menu t∆∞∆°ng t√°c
    system.interactive_menu()

if __name__ == "__main__":
    main()